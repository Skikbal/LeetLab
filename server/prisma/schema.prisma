// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String          @id @default(uuid())
  name                         String?
  email                        String          @unique
  avatar                       String?         @default("https://avatar.iran.liara.run/public/boy")
  role                         UserRole        @default(USER)
  password                     String?
  refreshToken                 String?
  isVerified                   Boolean?        @default(false)
  isDeActivated                Boolean?        @default(false)
  deletionRequestedAt          DateTime?
  unverifiedEmail              String?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  googleId                     String?         @unique
  githubId                     String?         @unique
  appleId                      String?         @unique
  forgotPasswordTokenExpiry    DateTime?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  //relations
  problems                     Problem[]
  submissions                  Submission[]
  solvedProblems               problemSolved[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty @default(EASY)
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?
  tags              Tag[]           @relation("ProblemToTag")
  testcases         Json
  codesnippets      Json
  referencesolution Json
  isDeleted         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  //relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions       Submission[]
  problemSolvedBy   problemSolved[]
}

//tags
model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // relation for many-to-many with Problem
  problems  Problem[] @relation("ProblemToTag")
}

//submission
model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCasesResult[]
}

model TestCasesResult {
  id             String     @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String
  expected       String
  stderr         String?
  compiledOutput String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  submission     Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
